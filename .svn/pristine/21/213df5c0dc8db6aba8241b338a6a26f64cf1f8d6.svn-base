package org.marmots.application.generator.utils;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChecksumUtils {
  private static final Logger LOGGER = LoggerFactory.getLogger(ChecksumUtils.class);

  public static String fileChecksum(String templatePath) throws IOException {
    try (FileInputStream fis = new FileInputStream(new File(templatePath))) {
      return DigestUtils.md5Hex(fis);
    }
  }

  // TODO object serialization changes for all tables as all are referenced directly or indirectly from another: (map) schemacrawler objects to generator objects?
  public static String objectChecksum(Serializable o) throws IOException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
    try (ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos)) {
      oos.writeObject(o);

      if (LOGGER.isDebugEnabled()) {
        new File(".metadata").mkdirs();
        IOUtils.write(bos.toByteArray(), new FileOutputStream(".metadata/" + o.getClass().getName() + "-" + PropertyUtils.getSimpleProperty(o, "fullName")));
        LOGGER.debug("object ({} -> {}) output stream size: {}", o.getClass().getName(), PropertyUtils.getSimpleProperty(o, "name"), bos.toByteArray().length);
      }
      return DigestUtils.md5Hex(bos.toByteArray());
    }
  }

}
