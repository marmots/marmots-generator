package org.marmots.application.generator.model.factories;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CompletableFuture;

import org.apache.commons.lang3.StringUtils;
import org.marmots.application.generator.Generator;
import org.marmots.application.generator.exceptions.ValidationException;
import org.marmots.application.generator.model.Attribute;
import org.marmots.application.generator.model.Entity;
import org.marmots.application.generator.utils.EntityUtils;
import org.marmots.application.generator.utils.LocalizationUtils;
import org.marmots.application.generator.utils.NameUtils;
import org.marmots.application.generator.utils.TypeUtils;

import schemacrawler.schema.Column;

public class AttributeFactory {
  private AttributeFactory() {
    // hide default constructor
  }

  public static Attribute create(CompletableFuture<Entity> entity, Column column) {
    Attribute attribute = new Attribute();
    entity.thenAccept((e) -> {
      attribute.setEntity(e);
    });
    attribute.setEntityFullName(column.getParent().getFullName());
    attribute.setColumn(column.getName());
    attribute.setColumnFullName(column.getFullName());

    attribute.setDecimalDigits(column.getDecimalDigits());
    attribute.setDefaultValue(column.getDefaultValue());
    attribute.setOrdinalPosition(column.getOrdinalPosition());
    attribute.setRemarks(column.getRemarks());

    attribute.setAttr(NameUtils.toAttributeName(NameUtils.toEnglishSingular(column.getName())));
    attribute.setAttrPlural(NameUtils.toAttributeName(NameUtils.toEnglishPlural(column.getName())));
    attribute.setClazz(NameUtils.toClassName(NameUtils.toEnglishSingular(column.getName())));
    attribute.setClazzPlural(NameUtils.toClassName(NameUtils.toEnglishPlural(column.getName())));
    attribute.setAngularTag(NameUtils.toAngularTag(NameUtils.toAttributeName(NameUtils.toEnglishSingular(column.getName()))));
    attribute.setAngularTagPlural(NameUtils.toAngularTag(NameUtils.toAttributeName(NameUtils.toEnglishPlural(column.getName()))));
    attribute.setLabel(NameUtils.toLabel(NameUtils.toEnglishSingular(column.getName()), true));
    attribute.setLabelPlural(NameUtils.toLabel(NameUtils.toEnglishPlural(column.getName()), true));
    attribute.setNullable(column.isNullable());

    attribute.setLocalized(LocalizationUtils.isLocalizationTable(column.getParent()));

    attribute.setSize(column.getSize());
    attribute.setAutoIncremented(column.isAutoIncremented());
    attribute.setJavaSqlType(column.getColumnDataType().getJavaSqlType().getName());
    attribute.setSqlType(column.getColumnDataType().getFullName());
    attribute.setSqlDatabaseType(column.getColumnDataType().getDatabaseSpecificTypeName());
    attribute.setTypeMappedClass(column.getColumnDataType().getTypeMappedClass());
    attribute.setJavaType(TypeUtils.toJavaType(column.getColumnDataType()));
    attribute.setJavascriptType(TypeUtils.toJavascriptType(column.getColumnDataType()));

    attribute.setPartOfPrimaryKey(column.isPartOfPrimaryKey());
    attribute.setPartOfUniqueKey(column.isPartOfUniqueIndex());
    attribute.setGenerated(column.isGenerated());
    attribute.setPartOfForeignKey(column.isPartOfForeignKey());

    attribute.setGetter("get" + NameUtils.toClassName(NameUtils.toEnglishSingular(column.getName())));
    attribute.setGetterPlural("get" + NameUtils.toClassName(NameUtils.toEnglishPlural(column.getName())));
    attribute.setSetter("set" + NameUtils.toClassName(NameUtils.toEnglishSingular(column.getName())));
    attribute.setSetterPlural("set" + NameUtils.toClassName(NameUtils.toEnglishPlural(column.getName())));

    if (attribute.isEnum()) {
      try {
        attribute.setEnumValues(getEnumValues(column));
      } catch (Exception e) {
        throw new ValidationException(String.format("cannot get enum values for %s", attribute.getColumnFullName()), e);
      }
    }

    if (column.getReferencedColumn() != null) {
      attribute.setReferencedAttribute(create(EntityUtils.FUTURE_ENTITIES.get(column.getReferencedColumn().getParent().getFullName()), column.getReferencedColumn()));
    }
    return attribute;
  }

  private static List<String> getEnumValues(Column column) throws Exception {
    if(Generator.connection != null) {
      String table = column.getParent().getName();
      String sql = "show columns from " + table + " where field = ?";
      try (PreparedStatement stmt = Generator.connection.prepareStatement(sql)) {
        stmt.setString(1, column.getName());
        try (ResultSet rs = stmt.executeQuery()) {
          if (rs.next()) {
            String s = rs.getString("type");
            s = s.substring(s.indexOf("(") + 1, s.indexOf(")"));
            s = StringUtils.replace(s, "'", "");
            return Arrays.asList(s.split("\\s*,\\s*"));
          }
        }
      }
    }
    return null; // lleig!
  }
}
