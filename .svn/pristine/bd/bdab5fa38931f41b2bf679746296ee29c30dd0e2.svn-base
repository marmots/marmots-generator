package org.marmots.application.generator.utils;

import java.io.File;
import java.io.IOException;
import java.util.List;

import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// TODO trobar un beautifier 'competent'
public class Beautifier {
  private static final Logger LOGGER = LoggerFactory.getLogger(Beautifier.class);

  private static final String DEFAULT_BEAUTIFY_COMMAND = "clang-format -style=Google -sort-includes -i ";
  private static final String JS_BEAUTIFY_COMMAND = "js-beautify -r -s 2 ";
  private static final String[] JS_BEAUTIFY_FILES = { "json", "html" };
  private static final String[] EXCLUDE_FILES = { "xml", "properties", "jsp", "css", "scss", "png", "md", "ico", "", "svg", "sql", "apt", "txt" };

  public static void beautifyFolder(File file) {
    LOGGER.trace("processing file: {}", file);
    if (file.isDirectory()) {
      for (File f : file.listFiles()) {
        beautifyFolder(f);
      }
    } else {
      beautify(file);
    }
  }

  public static void beautify(List<String> files) {
    for (String s : files) {
      beautify(new File(s));
    }
  }

  private static void beautify(File file) {
    if (!ArrayUtils.contains(EXCLUDE_FILES, FilenameUtils.getExtension(file.getName()).toLowerCase())) {
      String command = DEFAULT_BEAUTIFY_COMMAND;
      if (ArrayUtils.contains(JS_BEAUTIFY_FILES, FilenameUtils.getExtension(file.getName()).toLowerCase())) {
        command = JS_BEAUTIFY_COMMAND;
      }

      try {
        Process process = Runtime.getRuntime().exec(command + " " + file.getPath());
        int exitVal = process.waitFor();
        LOGGER.info("beautify command (exit:{}): {}", exitVal, command + " " + file.getPath());
      } catch (InterruptedException e) {
        LOGGER.error("Command interrupted", e);
      } catch (IOException e) {
        LOGGER.error("Ups! IOException...", e);
      }
    }
  }
}
