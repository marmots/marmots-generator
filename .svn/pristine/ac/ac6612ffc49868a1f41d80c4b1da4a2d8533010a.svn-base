package org.marmots.generator.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.databind.ObjectMapper;

import schemacrawler.schema.Schema;
import schemacrawler.schema.Table;

// TODO change metadata file location
// TODO use model objects as database metadata
public class GeneratorMetadata implements Serializable {
  private static final Logger LOGGER = LoggerFactory.getLogger(GeneratorMetadata.class);

  /**
   * generated uid
   */
  private static final long serialVersionUID = 3286405364097163836L;

  private String database;
  private Map<String, String> schemas = new HashMap<>();
  private Map<String, String> tables = new HashMap<>();
  private Map<String, String> templates = new HashMap<>();

  private transient Map<String, String> newSchemas = new HashMap<>();
  private transient Map<String, String> newTables = new HashMap<>();
  private transient Map<String, String> newTemplates = new HashMap<>();

  public GeneratorMetadata(String database) {
    this.database = database;
  }

  public static GeneratorMetadata initTransient(GeneratorMetadata metadata) {
    metadata.newSchemas = new HashMap<>();
    metadata.newTables = new HashMap<>();
    metadata.newTemplates = new HashMap<>();
    return metadata;
  }

  public static GeneratorMetadata read(String database) {
    try (FileInputStream bos = new FileInputStream("." + database + "-metadata"); ObjectInputStream oos = new ObjectInputStream(bos)) {
      return initTransient((GeneratorMetadata) oos.readObject());
    } catch (Exception e) {
      LOGGER.warn("can't read metadata file, first execution?");
      return new GeneratorMetadata(database);
    }
  }

  public void save() {
    // set new data
    setSchemas(newSchemas);
    setTables(newTables);
    setTemplates(newTemplates);

    // persist
    try (FileOutputStream bos = new FileOutputStream("." + database + "-metadata"); ObjectOutputStream oos = new ObjectOutputStream(bos)) {
      oos.writeObject(this);

      if (LOGGER.isDebugEnabled()) {
        ObjectMapper mapper = new ObjectMapper();
        mapper.writeValue(new File("." + database + "-metadata" + System.currentTimeMillis() + ".json"), this);
      }

    } catch (Exception e) {
      LOGGER.error("can't write metadata file", e);
    }
  }

  public Map<String, String> getSchemas() {
    return schemas;
  }

  public boolean overwriteSchema(Schema schema) throws Exception {
    String checksum = ChecksumUtils.objectChecksum(schema);
    try {
      return !checksum.equals(schemas.get(schema.getFullName()));
    } finally {
      newSchemas.put(schema.getFullName(), checksum);
    }
  }

  public void setSchemas(Map<String, String> schemas) {
    this.schemas = schemas;
  }

  public Map<String, String> getTables() {
    return tables;
  }

  public boolean overwriteTable(Table table) throws Exception {
    String checksum = ChecksumUtils.objectChecksum(table);
    try {
      return !checksum.equals(tables.get(table.getFullName()));
    } finally {
      newTables.put(table.getFullName(), checksum);
    }
  }

  public void setTables(Map<String, String> tables) {
    this.tables = tables;
  }

  public Map<String, String> getTemplates() {
    return templates;
  }

  public boolean overwriteTemplate(String templatePath) throws Exception {
    String checksum = ChecksumUtils.fileChecksum(templatePath);
    try {
      return !checksum.equals(templates.get(templatePath));
    } finally {
      newTemplates.put(templatePath, checksum);
    }
  }

  public void setTemplates(Map<String, String> templates) {
    this.templates = templates;
  }
}
