package org.marmots.generator.utils;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.io.IOUtils;
import org.marmots.generator.model.Application;
import org.marmots.generator.model.Attribute;
import org.marmots.generator.model.Entity;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.databind.ObjectMapper;

public class ChecksumUtils {
  private static final Logger LOGGER = LoggerFactory.getLogger(ChecksumUtils.class);

  private static final ObjectMapper MAPPER = new ObjectMapper();

  public static String fileChecksum(String templatePath) throws IOException {
    try (FileInputStream fis = new FileInputStream(new File(templatePath))) {
      return DigestUtils.md5Hex(fis);
    }
  }

  // TODO object serialization changes for all tables as all are referenced directly or indirectly from another: (map) schemacrawler objects to generator objects?
  public static String objectChecksum(Serializable o) throws IOException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
    try (ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos)) {
      oos.writeObject(o);
      return DigestUtils.md5Hex(bos.toByteArray());
    }
  }

  public static String jsonChecksum(Object o) throws IOException {
    String json = MAPPER.writerWithDefaultPrettyPrinter().writeValueAsString(o);
    if (LOGGER.isDebugEnabled()) {
      String filename = "";
      if (o instanceof Application) {
        filename = "app-" + ((Application) o).getAttr() + ".json";
      } else if (o instanceof Entity) {
        filename = "ent-" + ((Entity) o).getAttr() + ".json";
      } else if (o instanceof Attribute) {
        filename = "atr-" + ((Attribute) o).getAttr() + ".json";
      }
      try (FileWriter writer = new FileWriter(GeneratorMetadata.METADATA_FOLDER + "-" + filename)) {
        IOUtils.write(json, writer);
      }
    }
    return DigestUtils.md5Hex(json);
  }

}
